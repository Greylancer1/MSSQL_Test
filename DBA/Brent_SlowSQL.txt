BrentOzar.com/askbrent

Wait stats

Network
Memory
Storage
CPU

Selects are most simple

Insert, Update, Deletes are far more complicated

Running, Runnable (no CPU available), Waiting (Queued; waiting on resource <usually hardware>, otherwise a block)

sp_waitsnow script (Brent's site: BrentOzar.com/go/waitsnow)

sp_BlitzIndex

LCK = Lock

sp_askbrent script

Wait types:
Storage = 
PAGEIOLATCH - Read data from data file
	Make storage faster (Hardest/most expensive)
	Add more memory (Can do)
	Tune indexes (Can do)
	Tune Queries (Can do)
ASYNC_IO_COMPLETION - Writing to a data file, low priority
	Make sure the users care first
WRITELOG - Writing to T-Log, may indicate saturated log
	Write less data:
	Put processing tables in their own db
	Question code that writes data, like triggers
	Move low-value database to other servers
	*Make storage faster (SSD)
	
Phys Disk: Avg Sec/Read & Avg Sec/Write
SQL Server Buffer Manager: Page Life Expectancy (300+ good)

Ignore Queue Length metrics now, BOGUS!

Memory =
No indexes for cache type data.  Tons of logial reads may need an index.

Network = 
ASYNC_NETWORK_IO - Not a 'SQL' problem
	Slow network
	Small shares of network
	slow client pc
	Slow applications
	Applications asking for to much data

CPU = 
CXPACKET
	We're waiting for the Class to eXchange their PACKETs
	(Like a teacher(SQL) handing out papers(Queries) to students(cores) to help grade(process))
	Parallelism will play a role on whether this is an issue for you
	MAXDOP is how many 'students/cores' can be assigned one 'paper/query' (Highest bang for your buck is usually 8 or less)

SOS_SCHEDULER_YIELD - May need to adjust MAXDOP
	A query needs more CPU power
	
Strike a balance
MAXDOP: Use KB #2806535
Cost Threshold for Parallelism: default is 5, starting point should be 50

CXPacket should be below 50% of totalwaits

	Lots of runnable queries means waiting on CPU
	Surfaces as SIGNAL waits



Linked servers - SQL is schizo about where to run/sort the data.  Import/Export the data and slice and dice it locally.